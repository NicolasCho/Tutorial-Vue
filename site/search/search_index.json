{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vue.js Este tutorial tem como objetivo ser uma r\u00e1pida introdu\u00e7\u00e3o ao framework Vue.js. Ele abordar\u00e1 desde a instala\u00e7\u00e3o e prepara\u00e7\u00e3o do ambiente at\u00e9 a realiza\u00e7\u00e3o de requisi\u00e7\u00f5es por meio do Axios. O tutorial seguir\u00e1 o desenvolvimento de um app para cria\u00e7\u00e3o de e visualiza\u00e7\u00e3o de notas (post-it's). Servidor back-end Antes de iniciar o tutorial recomenda-se que tenha criado um servidor que prover\u00e1 os dados a serem recebidos nesta aplica\u00e7\u00e3o. Assim, recomenda-se a realiza\u00e7\u00e3o destes handouts: Tutorial Django Django REST Framework O Vue.js O Vue \u00e9 um framework Javascript open source utilizado principalmente para a cria\u00e7\u00e3o de single-page applications (aplica\u00e7\u00f5es de p\u00e1ginas \u00fanicas) e interfaces de usu\u00e1rio. Trata-se de um framework progressivo, ou seja, \u00e9 poss\u00edvel utilizar o Vue em apenas uma parte de sua aplica\u00e7\u00e3o caso voc\u00ea j\u00e1 possua uma aplica\u00e7\u00e3o server side . O Vue v\u00eam ganhando r\u00e1pida visibilidade nos ultimos tempos, firmando-se como um dos frameworks mais populares atualmente (junto ao Angular e ao React). Instala\u00e7\u00e3o e setup Antes de iniciar um projeto em Vue.js devemos garantir que uma vers\u00e3o do Node.js esteja instalada em sua m\u00e1quina. Neste tutorial utilizaremos a interface de linha de comandos (CLI) do Vue para acelerar a cria\u00e7\u00e3o do projeto. Para instalar a CLI, abra um terminal e digite: npm install vue -g @vue/cli Para iniciar um novo projeto utilizando a linha de comando basta escolher um diret\u00f3rio para armazenar o projeto e utilizar o seguinte comando no terminal: vue create <nome do projeto> No caso, substitua \"nome do projeto\" pelo nome que gostaria de dar ao projeto. Para o tutorial utilizaremos o nome \"getit\". Em seguida selecione a op\u00e7\u00e3o Default ([Vue 2] babel, eslint) utilizando as teclas direcionais do teclado e pressione enter. Ao terminar de criar o projeto, voc\u00ea poder\u00e1 executar o app utilizando: npm run serve O app dever\u00e1 estar dispon\u00edvel em http://localhost:8080/ Extens\u00e3o para o VS Code Para auxiliar no desenvolvimento de arquivos .vue no VS Code recomenda-se utilizar a extens\u00e3o Vetur Iniciando o desenvolvimento Estrutura do projeto Neste tutorial vamos editar majoritariamente os arquivos contidos no diret\u00f3rio src , localizado na pasta do projeto. Este diret\u00f3rio cont\u00e9m: main.js : serve como ponto de entrada da aplica\u00e7\u00e3o. \u00c9 geralmente o arquivo em que os components e bilbiotecas utilizados no projeto s\u00e3o registrados. App.vue : componente chamado pelo main.js, ou seja, componente de mais alto n\u00edvel e renderizado na p\u00e1gina inicial. components : diret\u00f3rio para armazenar os componentes criados no projeto assets : diret\u00f3rio para armazenar arquivos est\u00e1ticos, como css's e imagens Single file components Components podem ser utilizados para fragmentar o desenvolvimento do app em blocos menores, facilitando a compreens\u00e3o, manuseio e teste do c\u00f3digo. Al\u00e9m disso, \u00e9 muito comum separar o template, da l\u00f3gica e do estilo em arquivos diferentes quando trabalhamos com outros frameworks ou tecnologias para o desenvolvimento front-end. Para o Vue.js, entretanto, \u00e9 poss\u00edvel utilizar-se dos chamados single file components (os arquivos .vue) que permitem agrupar os tr\u00eas fatores mencionados em um s\u00f3 arquivo, sem a necessidade de criar um .html , .css e um .js para a constru\u00e7\u00e3o de um component. No caso do aplicativo a ser desenvolvido por este tutorial, por exemplo, criaremos um .vue para o component que representar\u00e1 uma nota (postit) Criando o primeiro component Crie o arquivo src/components/Note.vue com o seguinte conte\u00fado: <template> <div class=\"card\"> <h3 class=\"card-title\">Receita de miojo</h3> <div class=\"card-content\"> <p> Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :) </p> </div> </div> </template> Depois subtitua o conte\u00fado do src/App.vue para mostrar o component criado: <template> <div id='App'> <Note/> </div> </template> <script> import Note from './components/Note.vue' export default { name: 'App', components: { Note } } </script> Note que as tags template e script delimitam o template da l\u00f3gica no single file component. Nos c\u00f3digos acima, criamos um template Note que ser\u00e1 visualizado quando App.vue for chamado. Observe que o componente foi importado na parte do script e adicionado na parte do template do App.vue Para adicionar estilo e dar a apar\u00eancia de um post-it a nota criada, podemos adicionar o seguinte trecho ao Note.vue (depois do script): <style > .card { width: 200px; display: flex; flex-direction: column; min-height: 100px; margin: 10px 5px; padding: 10px; box-shadow: 0 10px 20px rgb(0 0 0 / 19%), 0 6px 6px rgb(0 0 0 / 23%); border-radius: 5px; font-family: \"Permanent Marker\", cursive; } .card-title { font-weight: bold; line-height: 1.2; margin-bottom: 1rem; font-size: 1.2rem; } .card-content { display: flex; flex-direction: column; align-items: center; justify-content: center; flex-grow: 1; color: #4c4c4c; } </style> Para utilizar fontes, adicione o seguinte trecho em public/index.html , logo ap\u00f3s a tag link e antes da tag title : <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css\" integrity=\"sha512-NmLkDIU1C/C88wi324HBc+S2kLhi08PN5GDeUVVVC/BVt/9Izdsc9SVeVfA1UZbY3sHUlDSyRXhCzHfr6hmPPw==\" crossorigin=\"anonymous\" /> <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" /> <link href=\"https://fonts.googleapis.com/css2?family=Roboto&family=Permanent+Marker&display=swap\" rel=\"stylesheet\" /> Apagando os exemplos Quando voc\u00ea iniciou o projeto, um arquivo \"HelloWorld.vue\" deve ter sido criado na pasta components . Voc\u00ea est\u00e1 livre para apag\u00e1-lo se desejar. Passando informa\u00e7\u00f5es \u00e0s notas Ao adicionar os c\u00f3digos acima ao projeto, percebe-se que adicionar mais notas ao App.vue iria apenas renderizar o mesmo cart\u00e3o multiplas vezes. Para resolver o problema, podemos fazer com que cada cart\u00e3o receba par\u00e2metros que mudem o conte\u00fado a ser renderizado. Para isso utilizamos props. Modifique o Note.vue de forma a receber os props. Para isso, substitua a parte do template por: <template> <div class=\"card\"> <h3 class=\"card-title\">{{title}}</h3> <div class=\"card-content\">{{content}}</div> </div> </template> <script> export default { name: 'Note', props: { title:String, content:String } } </script> Observe que os props a serem recebidos s\u00e3o do tipo String e s\u00e3o definidos na parte do script do component. Agora podemos passar par\u00e2metros quando chamarmos o Note no App.vue. Para testar, substitua a tag Note no App.vue por: <div id='App'> <Note title=\"Receita de miojo\" content=\"Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)\"> </Note> <Note title=\"Sorvete de banana\" content=\"Coloque a banana no congelador e espere.\"> </Note> </div> Note que agora foram renderizados duas notas com t\u00edtulos e conte\u00fados diferente. Renderizando m\u00faltiplos components Apesar de termos feito um avan\u00e7o ao passar os par\u00e2metros para as notas, ainda estamos passando informa\u00e7\u00e3o diretamente pelo c\u00f3digo na chamada da tag Note , al\u00e9m disso limitamos o n\u00famero de notas para apenas a quantidade criada no no App.vue. Assim, para melhorar, podemos renderizar notas a partir de uma array com as informa\u00e7\u00f5es que desejamos incluir, tendo uma quantidade vari\u00e1vel de notas a serem renderizadas. Para simular uma array de dados, substitua o c\u00f3digo no main.js por: import Vue from 'vue' import App from './App.vue' Vue.config.productionTip = false new Vue({ data: { notes:[ { id: 1, title: \"Receita de miojo\", content: \"Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)\", }, { id: 2, title: \"Sorvete de banana\", content: \"Coloque a banana no congelador e espere.\", } ] }, render(h){ return h(App, {props: {appData: this.notes}}) }, }).$mount('#app') Para que os dados sejam recebidos, substitua a parte do script do App.vue por: <script> import Note from './components/Note.vue' export default { name: 'App', props:[\"appData\"], components: { Note }, } </script> Dos c\u00f3digos acima, foi criado uma array de dados definida como notes no main.js . Esta array \u00e9 passada como um prop denominado appData para o App.vue . Para renderizar os m\u00faltiplos components utilizaremos a diretiva v-for do Vue. Assim, substitua o conte\u00fado do template do App.vue por: <template> <div id='App'> <div class='card-container'> <Note v-for=\"note in appData\" :key=\"note.id\" :title=\"note.title\" :content=\"note.content\" /> </div> </div> </template> Diretivas Diretivas no Vue.js s\u00e3o atributos especiais no HTML (template) que permite a manipula\u00e7\u00e3o do DOM (Modelo de Objeto de Documento). Assim, o v-for, por exemplo, permite que iteremos sobre os dados no appData e criemos um component Note para cada valor da array recebida. Aproveite e altere o estilo da p\u00e1gina de forma a organizar as notas recebendo uma quantidade vari\u00e1vel de informa\u00e7\u00e3o. Adicione ao final do App.vue : <style > .card-container{ display:flex; flex-wrap: wrap; flex-direction: row; justify-content: space-evenly; margin-top: 3rem; } </style> Fazendo requisi\u00e7\u00f5es Preparando para fazer as requisi\u00e7\u00f5es Agora que nosso aplicativo consegue obter informa\u00e7\u00f5es de arrays e disponibiliza-la na forma de anota\u00e7\u00f5es, podemos receber dados de servidores externos \u00e0 nossa aplica\u00e7\u00e3o. Utilizaremos o axios para tanto. Instale-o com o comando: npm i axios No servidor que atuar\u00e1 como um back-end e disponibilizar\u00e1 os dados para nossa aplica\u00e7\u00e3o (handouts recomendados no come\u00e7o do tutorial), instale o seguinte m\u00f3dulo: pip install django-cors-headers E no arquivo getit/settings.py , adicione a seguinte linha ao INSTALLED_APPS : INSTALLED_APPS = [ ... 'corsheaders', ... ] Em MIDDLEWARE adicione na primeira linha: MIDDLEWARE = [ 'corsheaders.middleware.CorsMiddleware', ... ] E finalmente, no final do arquivo adicione: CORS_ORIGIN_ALLOW_ALL = True Assim, o servidor Django deve estar pronto para aceitar as requisi\u00e7\u00f5es vindas do nosso aplicativo Utilizando o axios Para realizar uma requisi\u00e7\u00e3o do tipo GET com o axios, importe o axios e substitua a inst\u00e2ncia Vue no main.js por: import Vue from 'vue' import App from './App.vue' import axios from \"axios\"; Vue.config.productionTip = false new Vue({ data: { notes:[] }, mounted() { axios.get(\"http://localhost:8000/api/notes/\").then(res => this.notes = res.data) }, render(h){ return h(App, {props: {appData: this.notes}}) }, }).$mount('#app') Assim, os dados n\u00e3o vir\u00e3o de uma array criada no c\u00f3digo, e sim de uma requisi\u00e7\u00e3o feita para um servidor externo. Criando um formul\u00e1rio Agora que conseguimos pegar dados utilizando requisi\u00e7\u00f5es, vamos criar um formul\u00e1rio que mandar\u00e1 dados ao servidor externo e este adicionar\u00e1 \u00e0 lista de notas, fazendo com que as notas disponibilizadas no nosso aplicativo aumente. Crie o arquivo src/components/Formulario.vue que ser\u00e1 o componente para nosso formul\u00e1rio: <template> <form class=\"form-card\"> <input class=\"form-card-title\" type=\"text\" name=\"titulo\" v-model=\"form.title\" placeholder=\"T\u00edtulo\" /> <textarea class=\"autoresize\" name=\"detalhes\" v-model=\"form.content\" placeholder=\"Digite o conte\u00fado...\" ></textarea> <button class=\"btn\" v-on:click=\"postNote\">Criar</button> </form> </template> <script> import axios from \"axios\"; export default { name: 'Formulario', methods: { postNote() { axios .post(\"http://localhost:8000/api/notes/\", {title:this.form.title, content:this.form.content}) .then((res) => { this.user = res.data; }) .catch((error) => { console.log(error); }); }, }, data: function(){ return{ form:{ title:'', content:'' } } } } </script> <style> .form-card{ display: flex; flex-direction: column; margin-top: 3rem; margin-left: auto; margin-right: auto; width: 40rem; height: 8rem; box-shadow: 0 5px 10px 0 rgba(0,0,0,.5); border-radius: 0.5rem; padding: 0.5rem 0.5rem 0.4rem 0.5rem; } input{ border: none; margin-top: 0.5rem; font-size: 1.5rem; padding-bottom: 1rem; } textarea{ border: none; font-size: 1rem; } .btn{ display: block; background-color: #f7d943; border: none; border-radius: 0.2rem; height: 2rem; box-shadow: 0 1px 4px rgba(0, 0, 0, .6); } </style> Vamos analisar a implementa\u00e7\u00e3o do formul\u00e1rio. Na parte do script temos os dados serem enviados como data (no caso, o elemento form dentro de data). Ao olhar para a parte do template vemos que a diretiva v-model faz refer\u00eancia aos dados \u00e0 serem mandados na nossa request. A diretiva v-model \u00e9 utilizada para criar interliga\u00e7\u00f5es de m\u00e3o dupla (two-way binding) entre os dados declarados no script (o elemento form ) e os valores colocados nos elementos input, textarea e select do template . Assim, a diretiva atualiza automaticamente os valores com base nas entradas de cada elemento. Se o valor no script fosse alterado, isso seria vis\u00edvel na p\u00e1gina ( template ) e se o valor na p\u00e1gina for alterado (como uma entrada do usu\u00e1rio, por exemplo), o valor no script \u00e9 alterado para cada inst\u00e2ncia, caracterizando a m\u00e3o dupla. Logo, quando o usu\u00e1rio aperta o bot\u00e3o de enviar, uma requisi\u00e7\u00e3o do tipo POST \u00e9 feita, enviando os dados que est\u00e3o preenchidos no campo de texto. Para adicionar o formul\u00e1rio ao nosso aplicativo basta inserir a linha seguinte no App.vue , logo abaixo do primeiro div do template : <Formulario/> Adicione tamb\u00e9m o formul\u00e1rio aos components em scripts : <script> import Note from './components/Note.vue' import Formulario from './components/Formulario.vue' export default { name: 'App', props:[\"appData\"], components: { Note, Formulario, }, } </script> Com isso voc\u00ea deve ser capaz de postar novas notas no aplicativo. Rota\u00e7\u00e3o dos cart\u00f5es Para adicionar rota\u00e7\u00e3o aleat\u00f3ria aos cart\u00f5es, substitua o template e o script do Note.vue para: <template> <div class=\"card\" v-bind:style=\"styleObject\"> <h3 class=\"card-title\">{{title}}</h3> <div class=\"card-content\">{{content}}</div> </div> </template> <script> export default { name: 'Note', props: { title:String, content:String }, methods:{ randomInt(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min + 1)) + min; } }, data:function(){ return{ styleObject: { transform: `rotate(${this.randomInt(-5, 5)}deg)` } } } } </script>","title":"Vue.js"},{"location":"#vuejs","text":"Este tutorial tem como objetivo ser uma r\u00e1pida introdu\u00e7\u00e3o ao framework Vue.js. Ele abordar\u00e1 desde a instala\u00e7\u00e3o e prepara\u00e7\u00e3o do ambiente at\u00e9 a realiza\u00e7\u00e3o de requisi\u00e7\u00f5es por meio do Axios. O tutorial seguir\u00e1 o desenvolvimento de um app para cria\u00e7\u00e3o de e visualiza\u00e7\u00e3o de notas (post-it's). Servidor back-end Antes de iniciar o tutorial recomenda-se que tenha criado um servidor que prover\u00e1 os dados a serem recebidos nesta aplica\u00e7\u00e3o. Assim, recomenda-se a realiza\u00e7\u00e3o destes handouts: Tutorial Django Django REST Framework","title":"Vue.js"},{"location":"#o-vuejs","text":"O Vue \u00e9 um framework Javascript open source utilizado principalmente para a cria\u00e7\u00e3o de single-page applications (aplica\u00e7\u00f5es de p\u00e1ginas \u00fanicas) e interfaces de usu\u00e1rio. Trata-se de um framework progressivo, ou seja, \u00e9 poss\u00edvel utilizar o Vue em apenas uma parte de sua aplica\u00e7\u00e3o caso voc\u00ea j\u00e1 possua uma aplica\u00e7\u00e3o server side . O Vue v\u00eam ganhando r\u00e1pida visibilidade nos ultimos tempos, firmando-se como um dos frameworks mais populares atualmente (junto ao Angular e ao React).","title":"O Vue.js"},{"location":"#instalacao-e-setup","text":"Antes de iniciar um projeto em Vue.js devemos garantir que uma vers\u00e3o do Node.js esteja instalada em sua m\u00e1quina. Neste tutorial utilizaremos a interface de linha de comandos (CLI) do Vue para acelerar a cria\u00e7\u00e3o do projeto. Para instalar a CLI, abra um terminal e digite: npm install vue -g @vue/cli Para iniciar um novo projeto utilizando a linha de comando basta escolher um diret\u00f3rio para armazenar o projeto e utilizar o seguinte comando no terminal: vue create <nome do projeto> No caso, substitua \"nome do projeto\" pelo nome que gostaria de dar ao projeto. Para o tutorial utilizaremos o nome \"getit\". Em seguida selecione a op\u00e7\u00e3o Default ([Vue 2] babel, eslint) utilizando as teclas direcionais do teclado e pressione enter. Ao terminar de criar o projeto, voc\u00ea poder\u00e1 executar o app utilizando: npm run serve O app dever\u00e1 estar dispon\u00edvel em http://localhost:8080/ Extens\u00e3o para o VS Code Para auxiliar no desenvolvimento de arquivos .vue no VS Code recomenda-se utilizar a extens\u00e3o Vetur","title":"Instala\u00e7\u00e3o e setup"},{"location":"#iniciando-o-desenvolvimento","text":"","title":"Iniciando o desenvolvimento"},{"location":"#estrutura-do-projeto","text":"Neste tutorial vamos editar majoritariamente os arquivos contidos no diret\u00f3rio src , localizado na pasta do projeto. Este diret\u00f3rio cont\u00e9m: main.js : serve como ponto de entrada da aplica\u00e7\u00e3o. \u00c9 geralmente o arquivo em que os components e bilbiotecas utilizados no projeto s\u00e3o registrados. App.vue : componente chamado pelo main.js, ou seja, componente de mais alto n\u00edvel e renderizado na p\u00e1gina inicial. components : diret\u00f3rio para armazenar os componentes criados no projeto assets : diret\u00f3rio para armazenar arquivos est\u00e1ticos, como css's e imagens","title":"Estrutura do projeto"},{"location":"#single-file-components","text":"Components podem ser utilizados para fragmentar o desenvolvimento do app em blocos menores, facilitando a compreens\u00e3o, manuseio e teste do c\u00f3digo. Al\u00e9m disso, \u00e9 muito comum separar o template, da l\u00f3gica e do estilo em arquivos diferentes quando trabalhamos com outros frameworks ou tecnologias para o desenvolvimento front-end. Para o Vue.js, entretanto, \u00e9 poss\u00edvel utilizar-se dos chamados single file components (os arquivos .vue) que permitem agrupar os tr\u00eas fatores mencionados em um s\u00f3 arquivo, sem a necessidade de criar um .html , .css e um .js para a constru\u00e7\u00e3o de um component. No caso do aplicativo a ser desenvolvido por este tutorial, por exemplo, criaremos um .vue para o component que representar\u00e1 uma nota (postit)","title":"Single file components"},{"location":"#criando-o-primeiro-component","text":"Crie o arquivo src/components/Note.vue com o seguinte conte\u00fado: <template> <div class=\"card\"> <h3 class=\"card-title\">Receita de miojo</h3> <div class=\"card-content\"> <p> Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :) </p> </div> </div> </template> Depois subtitua o conte\u00fado do src/App.vue para mostrar o component criado: <template> <div id='App'> <Note/> </div> </template> <script> import Note from './components/Note.vue' export default { name: 'App', components: { Note } } </script> Note que as tags template e script delimitam o template da l\u00f3gica no single file component. Nos c\u00f3digos acima, criamos um template Note que ser\u00e1 visualizado quando App.vue for chamado. Observe que o componente foi importado na parte do script e adicionado na parte do template do App.vue Para adicionar estilo e dar a apar\u00eancia de um post-it a nota criada, podemos adicionar o seguinte trecho ao Note.vue (depois do script): <style > .card { width: 200px; display: flex; flex-direction: column; min-height: 100px; margin: 10px 5px; padding: 10px; box-shadow: 0 10px 20px rgb(0 0 0 / 19%), 0 6px 6px rgb(0 0 0 / 23%); border-radius: 5px; font-family: \"Permanent Marker\", cursive; } .card-title { font-weight: bold; line-height: 1.2; margin-bottom: 1rem; font-size: 1.2rem; } .card-content { display: flex; flex-direction: column; align-items: center; justify-content: center; flex-grow: 1; color: #4c4c4c; } </style> Para utilizar fontes, adicione o seguinte trecho em public/index.html , logo ap\u00f3s a tag link e antes da tag title : <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css\" integrity=\"sha512-NmLkDIU1C/C88wi324HBc+S2kLhi08PN5GDeUVVVC/BVt/9Izdsc9SVeVfA1UZbY3sHUlDSyRXhCzHfr6hmPPw==\" crossorigin=\"anonymous\" /> <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" /> <link href=\"https://fonts.googleapis.com/css2?family=Roboto&family=Permanent+Marker&display=swap\" rel=\"stylesheet\" /> Apagando os exemplos Quando voc\u00ea iniciou o projeto, um arquivo \"HelloWorld.vue\" deve ter sido criado na pasta components . Voc\u00ea est\u00e1 livre para apag\u00e1-lo se desejar.","title":"Criando o primeiro component"},{"location":"#passando-informacoes-as-notas","text":"Ao adicionar os c\u00f3digos acima ao projeto, percebe-se que adicionar mais notas ao App.vue iria apenas renderizar o mesmo cart\u00e3o multiplas vezes. Para resolver o problema, podemos fazer com que cada cart\u00e3o receba par\u00e2metros que mudem o conte\u00fado a ser renderizado. Para isso utilizamos props. Modifique o Note.vue de forma a receber os props. Para isso, substitua a parte do template por: <template> <div class=\"card\"> <h3 class=\"card-title\">{{title}}</h3> <div class=\"card-content\">{{content}}</div> </div> </template> <script> export default { name: 'Note', props: { title:String, content:String } } </script> Observe que os props a serem recebidos s\u00e3o do tipo String e s\u00e3o definidos na parte do script do component. Agora podemos passar par\u00e2metros quando chamarmos o Note no App.vue. Para testar, substitua a tag Note no App.vue por: <div id='App'> <Note title=\"Receita de miojo\" content=\"Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)\"> </Note> <Note title=\"Sorvete de banana\" content=\"Coloque a banana no congelador e espere.\"> </Note> </div> Note que agora foram renderizados duas notas com t\u00edtulos e conte\u00fados diferente.","title":"Passando informa\u00e7\u00f5es \u00e0s notas"},{"location":"#renderizando-multiplos-components","text":"Apesar de termos feito um avan\u00e7o ao passar os par\u00e2metros para as notas, ainda estamos passando informa\u00e7\u00e3o diretamente pelo c\u00f3digo na chamada da tag Note , al\u00e9m disso limitamos o n\u00famero de notas para apenas a quantidade criada no no App.vue. Assim, para melhorar, podemos renderizar notas a partir de uma array com as informa\u00e7\u00f5es que desejamos incluir, tendo uma quantidade vari\u00e1vel de notas a serem renderizadas. Para simular uma array de dados, substitua o c\u00f3digo no main.js por: import Vue from 'vue' import App from './App.vue' Vue.config.productionTip = false new Vue({ data: { notes:[ { id: 1, title: \"Receita de miojo\", content: \"Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)\", }, { id: 2, title: \"Sorvete de banana\", content: \"Coloque a banana no congelador e espere.\", } ] }, render(h){ return h(App, {props: {appData: this.notes}}) }, }).$mount('#app') Para que os dados sejam recebidos, substitua a parte do script do App.vue por: <script> import Note from './components/Note.vue' export default { name: 'App', props:[\"appData\"], components: { Note }, } </script> Dos c\u00f3digos acima, foi criado uma array de dados definida como notes no main.js . Esta array \u00e9 passada como um prop denominado appData para o App.vue . Para renderizar os m\u00faltiplos components utilizaremos a diretiva v-for do Vue. Assim, substitua o conte\u00fado do template do App.vue por: <template> <div id='App'> <div class='card-container'> <Note v-for=\"note in appData\" :key=\"note.id\" :title=\"note.title\" :content=\"note.content\" /> </div> </div> </template> Diretivas Diretivas no Vue.js s\u00e3o atributos especiais no HTML (template) que permite a manipula\u00e7\u00e3o do DOM (Modelo de Objeto de Documento). Assim, o v-for, por exemplo, permite que iteremos sobre os dados no appData e criemos um component Note para cada valor da array recebida. Aproveite e altere o estilo da p\u00e1gina de forma a organizar as notas recebendo uma quantidade vari\u00e1vel de informa\u00e7\u00e3o. Adicione ao final do App.vue : <style > .card-container{ display:flex; flex-wrap: wrap; flex-direction: row; justify-content: space-evenly; margin-top: 3rem; } </style>","title":"Renderizando m\u00faltiplos components"},{"location":"#fazendo-requisicoes","text":"","title":"Fazendo requisi\u00e7\u00f5es"},{"location":"#preparando-para-fazer-as-requisicoes","text":"Agora que nosso aplicativo consegue obter informa\u00e7\u00f5es de arrays e disponibiliza-la na forma de anota\u00e7\u00f5es, podemos receber dados de servidores externos \u00e0 nossa aplica\u00e7\u00e3o. Utilizaremos o axios para tanto. Instale-o com o comando: npm i axios No servidor que atuar\u00e1 como um back-end e disponibilizar\u00e1 os dados para nossa aplica\u00e7\u00e3o (handouts recomendados no come\u00e7o do tutorial), instale o seguinte m\u00f3dulo: pip install django-cors-headers E no arquivo getit/settings.py , adicione a seguinte linha ao INSTALLED_APPS : INSTALLED_APPS = [ ... 'corsheaders', ... ] Em MIDDLEWARE adicione na primeira linha: MIDDLEWARE = [ 'corsheaders.middleware.CorsMiddleware', ... ] E finalmente, no final do arquivo adicione: CORS_ORIGIN_ALLOW_ALL = True Assim, o servidor Django deve estar pronto para aceitar as requisi\u00e7\u00f5es vindas do nosso aplicativo","title":"Preparando para fazer as requisi\u00e7\u00f5es"},{"location":"#utilizando-o-axios","text":"Para realizar uma requisi\u00e7\u00e3o do tipo GET com o axios, importe o axios e substitua a inst\u00e2ncia Vue no main.js por: import Vue from 'vue' import App from './App.vue' import axios from \"axios\"; Vue.config.productionTip = false new Vue({ data: { notes:[] }, mounted() { axios.get(\"http://localhost:8000/api/notes/\").then(res => this.notes = res.data) }, render(h){ return h(App, {props: {appData: this.notes}}) }, }).$mount('#app') Assim, os dados n\u00e3o vir\u00e3o de uma array criada no c\u00f3digo, e sim de uma requisi\u00e7\u00e3o feita para um servidor externo.","title":"Utilizando o axios"},{"location":"#criando-um-formulario","text":"Agora que conseguimos pegar dados utilizando requisi\u00e7\u00f5es, vamos criar um formul\u00e1rio que mandar\u00e1 dados ao servidor externo e este adicionar\u00e1 \u00e0 lista de notas, fazendo com que as notas disponibilizadas no nosso aplicativo aumente. Crie o arquivo src/components/Formulario.vue que ser\u00e1 o componente para nosso formul\u00e1rio: <template> <form class=\"form-card\"> <input class=\"form-card-title\" type=\"text\" name=\"titulo\" v-model=\"form.title\" placeholder=\"T\u00edtulo\" /> <textarea class=\"autoresize\" name=\"detalhes\" v-model=\"form.content\" placeholder=\"Digite o conte\u00fado...\" ></textarea> <button class=\"btn\" v-on:click=\"postNote\">Criar</button> </form> </template> <script> import axios from \"axios\"; export default { name: 'Formulario', methods: { postNote() { axios .post(\"http://localhost:8000/api/notes/\", {title:this.form.title, content:this.form.content}) .then((res) => { this.user = res.data; }) .catch((error) => { console.log(error); }); }, }, data: function(){ return{ form:{ title:'', content:'' } } } } </script> <style> .form-card{ display: flex; flex-direction: column; margin-top: 3rem; margin-left: auto; margin-right: auto; width: 40rem; height: 8rem; box-shadow: 0 5px 10px 0 rgba(0,0,0,.5); border-radius: 0.5rem; padding: 0.5rem 0.5rem 0.4rem 0.5rem; } input{ border: none; margin-top: 0.5rem; font-size: 1.5rem; padding-bottom: 1rem; } textarea{ border: none; font-size: 1rem; } .btn{ display: block; background-color: #f7d943; border: none; border-radius: 0.2rem; height: 2rem; box-shadow: 0 1px 4px rgba(0, 0, 0, .6); } </style> Vamos analisar a implementa\u00e7\u00e3o do formul\u00e1rio. Na parte do script temos os dados serem enviados como data (no caso, o elemento form dentro de data). Ao olhar para a parte do template vemos que a diretiva v-model faz refer\u00eancia aos dados \u00e0 serem mandados na nossa request. A diretiva v-model \u00e9 utilizada para criar interliga\u00e7\u00f5es de m\u00e3o dupla (two-way binding) entre os dados declarados no script (o elemento form ) e os valores colocados nos elementos input, textarea e select do template . Assim, a diretiva atualiza automaticamente os valores com base nas entradas de cada elemento. Se o valor no script fosse alterado, isso seria vis\u00edvel na p\u00e1gina ( template ) e se o valor na p\u00e1gina for alterado (como uma entrada do usu\u00e1rio, por exemplo), o valor no script \u00e9 alterado para cada inst\u00e2ncia, caracterizando a m\u00e3o dupla. Logo, quando o usu\u00e1rio aperta o bot\u00e3o de enviar, uma requisi\u00e7\u00e3o do tipo POST \u00e9 feita, enviando os dados que est\u00e3o preenchidos no campo de texto. Para adicionar o formul\u00e1rio ao nosso aplicativo basta inserir a linha seguinte no App.vue , logo abaixo do primeiro div do template : <Formulario/> Adicione tamb\u00e9m o formul\u00e1rio aos components em scripts : <script> import Note from './components/Note.vue' import Formulario from './components/Formulario.vue' export default { name: 'App', props:[\"appData\"], components: { Note, Formulario, }, } </script> Com isso voc\u00ea deve ser capaz de postar novas notas no aplicativo.","title":"Criando um formul\u00e1rio"},{"location":"#rotacao-dos-cartoes","text":"Para adicionar rota\u00e7\u00e3o aleat\u00f3ria aos cart\u00f5es, substitua o template e o script do Note.vue para: <template> <div class=\"card\" v-bind:style=\"styleObject\"> <h3 class=\"card-title\">{{title}}</h3> <div class=\"card-content\">{{content}}</div> </div> </template> <script> export default { name: 'Note', props: { title:String, content:String }, methods:{ randomInt(min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min + 1)) + min; } }, data:function(){ return{ styleObject: { transform: `rotate(${this.randomInt(-5, 5)}deg)` } } } } </script>","title":"Rota\u00e7\u00e3o dos cart\u00f5es"}]}